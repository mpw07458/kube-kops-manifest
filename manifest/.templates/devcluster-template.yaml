apiVersion: kops/v1alpha2
kind: Cluster
metadata:
  creationTimestamp: null
  name: {{ cluster_name }}
spec:
  api:
    loadBalancer:
      type: Internal
  authorization:
    rbac: {}
  channel: stable
  cloudProvider: aws
  clusterDNSDomain: cluster.local
  configBase: {{ state_base }}
  configStore: {{ state_base }}
  docker:
    registryMirrors:
    - {{ registry_mirror }}
  egress:
    httpProxy:
      host: {{ http_proxy }}
      port: 80
    excludes: {{ http_proxy_exclude }}
  etcdClusters:
  - enableEtcdTLS: true
    etcdMembers:
    - instanceGroup: master-us-west-1a
      name: a
    - instanceGroup: master-us-west-1b
      name: b
    - instanceGroup: master-us-west-1c
      name: c
    image: docker.artifactory/etcd-amd64:3.2.24
    name: main
    version: 3.2.24
  - enableEtcdTLS: true
    etcdMembers:
    - instanceGroup: master-us-west-1a
      name: a
    - instanceGroup: master-us-west-1b
      name: b
    - instanceGroup: master-us-west-1c
      name: c
    image: docker.artifactory/etcd-amd64:3.2.24
    name: events
    version: 3.2.24
  fileAssets:
  - content: "apiVersion: audit.k8s.io/v1beta1 # This is required.\nkind: Policy\n#
      Don't generate audit events for all requests in RequestReceived stage.\nomitStages:\n
      \ - \"RequestReceived\"\nrules:\n  # Log pod changes at RequestResponse level\n
      \ - level: RequestResponse\n    resources:\n    - group: \"\"\n      # Resource
      \"pods\" doesn't match requests to any subresource of pods,\n      # which is
      consistent with the RBAC policy.\n      resources: [\"pods\"]\n  # Log \"pods/log\",
      \"pods/status\" at Metadata level\n  - level: Metadata\n    resources:\n    -
      group: \"\"\n      resources: [\"pods/log\", \"pods/status\"]\n\n  # Don't log
      requests to a configmap called \"controller-leader\"\n  - level: None\n    resources:\n
      \   - group: \"\"\n      resources: [\"configmaps\"]\n      resourceNames: [\"controller-leader\"]\n\n
      \ # Don't log watch requests by the \"system:kube-proxy\" on endpoints or services\n
      \ - level: None\n    users: [\"system:kube-proxy\"]\n    verbs: [\"watch\"]\n
      \   resources:\n    - group: \"\" # core API group\n      resources: [\"endpoints\",
      \"services\"]\n\n  # Don't log authenticated requests to certain non-resource
      URL paths.\n  - level: None\n    userGroups: [\"system:authenticated\"]\n    nonResourceURLs:\n
      \   - \"/api*\" # Wildcard matching.\n    - \"/version\"\n\n  # Log the request
      body of configmap changes in kube-system.\n  - level: Request\n    resources:\n
      \   - group: \"\" # core API group\n      resources: [\"configmaps\"]\n    #
      This rule only applies to resources in the \"kube-system\" namespace.\n    #
      The empty string \"\" can be used to select non-namespaced resources.\n    namespaces:
      [\"kube-system\"]\n\n  # Log configmap and secret changes in all other namespaces
      at the Metadata level.\n  - level: Metadata\n    resources:\n    - group: \"\"
      # core API group\n      resources: [\"secrets\", \"configmaps\"]\n\n  # Log
      all other resources in core and extensions at the Request level.\n  - level:
      Request\n    resources:\n    - group: \"\" # core API group\n    - group: \"extensions\"
      # Version of group should NOT be included.\n\n  # A catch-all rule to log all
      other requests at the Metadata level.\n  - level: Metadata\n    # Long-running
      requests like watches that fall under this rule will not\n    # generate an
      audit event in RequestReceived.\n    omitStages:\n      - \"RequestReceived\"
      \   \n"
    name: audit.yaml
    path: /srv/kubernetes/audit.yaml
    roles:
    - Master
    - Node
    - Bastion
  iam:
    allowContainerRegistry: true
    legacy: false
  keyStore: {{ state_base }}/pki
  kubeAPIServer:
    auditLogMaxAge: 10
    auditLogMaxBackups: 1
    auditLogMaxSize: 100
    auditLogPath: /var/log/kube-apiserver-audit.log
    auditPolicyFile: /srv/kubernetes/audit.yaml
    runtimeConfig:
      autoscaling/v2beta1: "true"
  kubeControllerManager:
    horizontalPodAutoscalerUseRestClients: true
  kubelet:
    enableCustomMetrics: true
  kubernetesApiAccess:
  - 10.0.0.0/8
  kubernetesVersion: 1.10.11
  masterInternalName: {{ master_internal_name }}
  masterPublicName: {{ master_public_name }}
  networkCIDR: {{ network_cidr }}
  networkID: {{ network_id }}
  networking:
    canal: {}
  nonMasqueradeCIDR: {{ non_masq_cidr }}
  sshAccess:
  - 10.0.0.0/8
  subnets:
  - cidr: {{ private_1a_cidr }}
    id: {{ private_1a_id }}
    egress: {{ private_1a_egress }}
    name: {{ private_1a_name }}
    type: {{ private_1a_type }}
    zone: {{ private_1a_zone}}
  - cidr: {{ private_1b_cidr }}
    id: {{ private_1b_id }}
    egress: {{ private_1b_egress }}
    name: {{ private_1b_name }}
    type: {{ private_1b_type }}
    zone: {{ private_1b_zone }}
  - cidr: {{ private_1c_cidr }}
    id: {{ private_1c_id }}
    egress: {{ private_1c_egress }}
    name: {{ private_1c_name }}
    type: {{ private_1c_type }}
    zone: {{ private_1c_zone }}
  - cidr: {{ utility_1a_cidr }}
    id: {{ utility_1a_id }}
    name: {{ utility_1a_name }}
    type: {{ utility_1a_type }}
    zone: {{ utility_1a_zone }}
  - cidr: {{ utility_1a_cidr }}
    id: {{ utility_1b_id }}
    name: {{ utility_1b_name }}
    type: {{ utility_1b_type }}
    zone: {{ utility_1b_zone }}
  - cidr: {{ utility_1c_cidr }}
    id: {{ utility_1c_id }}
    name: {{ utility_1c_name }}
    type: {{ utility_1c_type }}
    zone: {{ utility_1c_zone }}
  topology:
    dns:
      type: Public
    masters: private
    nodes: private

---

apiVersion: kops/v1alpha2
kind: InstanceGroup
metadata:
  creationTimestamp: null
  labels:
    kops.k8s.io/cluster: {{ cluster_name }}
  name: master-us-west-1a
spec:
  additionalUserData:
  - name: {{ chef_script_name }}
    type: text/x-shellscript
    content: {% include 'chef-manifest.yaml' %}
  associatePublicIp: false
  image: {{ master_image }}
  machineType: {{ master_type }}
  maxSize: {{ master_max }}
  minSize: {{ master_min }}
  nodeLabels:
    kops.k8s.io/instancegroup: master-us-west-1a
  cloudLabels:
    type: k8s
    subtype: master
  role: Master
  rootVolumeSize: 128
  subnets:
  - us-west-1a

---

apiVersion: kops/v1alpha2
kind: InstanceGroup
metadata:
  creationTimestamp: null
  labels:
    kops.k8s.io/cluster: {{ cluster_name }}
  name: master-us-west-1b
spec:
  additionalUserData:
  - name: {{ chef_script_name }}
    type: text/x-shellscript
    content: {% include 'chef-manifest.yaml' %}
  associatePublicIp: false
  image: {{ master_image }}
  machineType: {{ master_type }}
  maxSize: {{ master_max }}
  minSize: {{ master_min }}
  nodeLabels:
    kops.k8s.io/instancegroup: master-us-west-1b
  cloudLabels:
    type: k8s
    subtype: master
  role: Master
  rootVolumeSize: 128
  subnets:
  - us-west-1b

---

apiVersion: kops/v1alpha2
kind: InstanceGroup
metadata:
  creationTimestamp: null
  labels:
    kops.k8s.io/cluster: {{ cluster_name }}
  name: master-us-west-1c
spec:
  additionalUserData:
  - name: {{ chef_script_name }}
    type: text/x-shellscript
    content: {% include 'chef-manifest.yaml' %}
  associatePublicIp: false
  image: {{ master_image }}
  machineType: {{ master_type }}
  maxSize: {{ master_max }}
  minSize: {{ master_min }}
  nodeLabels:
    kops.k8s.io/instancegroup: master-us-west-1c
  cloudLabels:
    type: k8s
    subtype: master
  role: Master
  rootVolumeSize: 128
  subnets:
  - us-west-1c

---

apiVersion: kops/v1alpha2
kind: InstanceGroup
metadata:
  creationTimestamp: null
  labels:
    kops.k8s.io/cluster: {{ cluster_name }}
  name: nodes
spec:
  additionalUserData:
  - name: {{ chef_script_name }}
    type: text/x-shellscript
    content: {% include 'chef-manifest.yaml' %}
  associatePublicIp: false
  image: {{ node_image }}
  machineType: {{ node_type }}
  maxSize: {{ node_max }}
  minSize: {{ node_min }}
  nodeLabels:
    kops.k8s.io/instancegroup: nodes
  cloudLabels:
    type: k8s
    subtype: worker
  role: Node
  rootVolumeType: standard
  subnets:
  - us-west-1a
  - us-west-1b
  - us-west-1c
